package parser

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"sort"
	"strings"
	"text/template"
)

func CreateKeyMapCode(path string) {

	readFile, err := os.Open(path)

	if err != nil {
		fmt.Println(err)
	}
	fileScanner := bufio.NewScanner(readFile)
	fileScanner.Split(bufio.ScanLines)
	var fileLines []string

	for fileScanner.Scan() {
		fileLines = append(fileLines, fileScanner.Text())
	}

	readFile.Close()

	var KeyMapTmpldata []string
	for _, line := range fileLines {
		fmt.Println(line)
		if line[0] == '#' {
			continue
		}
		// 开始处理
		command := strings.Split(line, " ")
		if len(command) == 5 {
			log.Println("发现命令")
			var aKey KeyMapCode
			//toCamel(data.TableName)
			aKey.Table1 = toCamel(command[0])
			aKey.Col1 = toCamel(command[1])
			aKey.Col1Raw = command[1]
			aKey.Table2 = toCamel(command[3])
			aKey.Col2 = toCamel(command[4])
			builder := strings.Builder{}
			KeyMapTmpl.Execute(&builder, aKey)
			log.Println(builder.String())
			KeyMapTmpldata = append(KeyMapTmpldata, builder.String())
		}
	}

	// fmt.Println(fileLines)
	w, err := os.OpenFile("./model/keymap.go", os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0666)
	var aKeyMapCodeCodes KeyMapCodeCodes
	aKeyMapCodeCodes.Package = "model"
	var importPathArr []string
	importPathArr = append(importPathArr, "gorm.io/gorm")
	importPathArr = append(importPathArr, "github.com/unstoppablego/framework/logs")
	sort.Strings(importPathArr)
	aKeyMapCodeCodes.ImportPath = importPathArr
	aKeyMapCodeCodes.KeyMapCodeData = KeyMapTmpldata
	err = KeyMapFileTmpl.Execute(w, aKeyMapCodeCodes)
	if err != nil {
		log.Println(err)
	}

}

var (
	KeyMapTmplRaw     string
	KeyMapTmpl        *template.Template
	KeyMapTmplFileRaw string
	KeyMapFileTmpl    *template.Template
)

type KeyMapCode struct {
	Table1  string
	Col1Raw string
	Col1    string
	Table2  string
	Col2    string
}

type KeyMapCodeCodes struct {
	Package        string
	ImportPath     []string
	KeyMapCodeData []string
}

func init() {

	KeyMapTmplRaw = `
func (ta {{.Table2}}) Get{{.Table1}}s(tx *gorm.DB) []{{.Table1}} {
	var tb []{{.Table1}}
	if err := tx.Where("{{.Col1Raw}} = ?", ta.{{.Col2}}).Find(&tb).Error; err != nil {
		if err!=gorm.ErrRecordNotFound{
			logs.Error(err)
		}
	}
	return tb
}
`
	KeyMapTmplFileRaw = `// Code generated by github.com/unstoppablego/sql2struct
package {{.Package}}
{{if .ImportPath}}
import (
	{{- range .ImportPath}}
	"{{.}}"
	{{- end}}
)
{{- end}}

{{if .KeyMapCodeData}}

{{- range .KeyMapCodeData}}
{{.}}
{{- end}}

{{- end}}





`
	var err error
	KeyMapTmpl, err = template.New("KeyMapTmplRaw").Parse(KeyMapTmplRaw)
	if err != nil {
		panic(err)
	}
	KeyMapFileTmpl, err = template.New("KeyMapTmplFileRaw").Parse(KeyMapTmplFileRaw)
	if err != nil {
		panic(err)
	}
}
